"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const fs_1 = require("fs");
const path_1 = require("path");
const apollo_graphql_1 = require("apollo-graphql");
class FileSchemaProvider {
    constructor(config) {
        this.config = config;
    }
    async resolveSchema() {
        if (this.schema)
            return this.schema;
        const { path, paths } = this.config;
        const documents = path
            ? [this.loadFileAndGetDocument(path)]
            : paths
                ? paths.map(this.loadFileAndGetDocument)
                : undefined;
        if (!documents)
            throw new Error(`Schema could not be loaded for [${path ? path : paths ? paths.join(", ") : "undefined"}]`);
        this.schema = apollo_graphql_1.buildSchemaFromSDL(documents);
        if (!this.schema)
            throw new Error(`Schema could not be loaded for ${path}`);
        return this.schema;
    }
    loadFileAndGetDocument(path) {
        let result;
        try {
            result = fs_1.readFileSync(path, {
                encoding: "utf-8"
            });
        }
        catch (err) {
            throw new Error(`Unable to read file ${path}. ${err.message}`);
        }
        const ext = path_1.extname(path);
        if (ext === ".json") {
            const parsed = JSON.parse(result);
            const __schema = parsed.data
                ? parsed.data.__schema
                : parsed.__schema
                    ? parsed.__schema
                    : parsed;
            const schema = graphql_1.buildClientSchema({ __schema });
            return graphql_1.parse(graphql_1.printSchema(schema));
        }
        else if (ext === ".graphql" || ext === ".graphqls" || ext === ".gql") {
            return graphql_1.parse(result);
        }
        throw new Error("File Type not supported for schema loading. Must be a .json, .graphql, .gql, or .graphqls file");
    }
    onSchemaChange(_handler) {
        throw new Error("File watching not implemented yet");
        return () => { };
    }
}
exports.FileSchemaProvider = FileSchemaProvider;
//# sourceMappingURL=file.js.map